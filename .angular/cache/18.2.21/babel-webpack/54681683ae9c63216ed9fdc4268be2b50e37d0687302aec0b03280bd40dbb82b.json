{"ast":null,"code":"import { of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let MovimentoService = /*#__PURE__*/(() => {\n  class MovimentoService {\n    constructor() {\n      // dados iniciais mockados\n      this.movimentosSeed = [{\n        mes: 10,\n        ano: 2025,\n        codigoProduto: 'PRD001',\n        descricaoProduto: 'Produto A',\n        nrLancamento: 1,\n        descricao: 'Movimento inicial A',\n        valor: 150.5\n      }, {\n        mes: 10,\n        ano: 2025,\n        codigoProduto: 'PRD002',\n        descricaoProduto: 'Produto B',\n        nrLancamento: 1,\n        descricao: 'Movimento inicial B',\n        valor: 250.0\n      }];\n      // mock PRODUTO\n      this.produtos = [{\n        codProduto: 'PRD001',\n        desProduto: 'Produto A',\n        staStatus: 'A'\n      }, {\n        codProduto: 'PRD002',\n        desProduto: 'Produto B',\n        staStatus: 'A'\n      }];\n      // mock PRODUTO_COSIF\n      this.produtosCosif = [{\n        codProduto: 'PRD001',\n        codCosif: 'COS001',\n        codClassificacao: 'C1',\n        staStatus: 'A'\n      }, {\n        codProduto: 'PRD001',\n        codCosif: 'COS002',\n        codClassificacao: 'C2',\n        staStatus: 'A'\n      }, {\n        codProduto: 'PRD002',\n        codCosif: 'COS101',\n        codClassificacao: 'C1',\n        staStatus: 'A'\n      }];\n    }\n    // Simula chamada GET ao backend\n    getMovimentos() {\n      // retorna cópia para evitar mutações externas e simula latência\n      return of(this.movimentosSeed.map(m => ({\n        ...m\n      }))).pipe(delay(300));\n    }\n    // retorna lista de produtos (mock)\n    getProdutos() {\n      return of(this.produtos.map(p => ({\n        ...p\n      }))).pipe(delay(150));\n    }\n    // retorna cosifs, opcionalmente filtrando por codProduto\n    getProdutoCosif(codProduto) {\n      const list = codProduto ? this.produtosCosif.filter(c => c.codProduto === codProduto) : this.produtosCosif.slice();\n      return of(list.map(c => ({\n        ...c\n      }))).pipe(delay(150));\n    }\n    // Simula POST: gera nrLancamento incrementando pelo mês/ano e retorna o movimento criado\n    addMovimento(movimento) {\n      // calcula nrLancamento como 1 + maior existente para mesmo mês/ano\n      const sameMonth = this.movimentosSeed.filter(m => m.mes === movimento.mes && m.ano === movimento.ano);\n      const maxLanc = sameMonth.length ? Math.max(...sameMonth.map(s => s.nrLancamento)) : 0;\n      const novo = {\n        mes: movimento.mes ?? new Date().getMonth() + 1,\n        ano: movimento.ano ?? new Date().getFullYear(),\n        codigoProduto: movimento.codigoProduto ?? '',\n        descricaoProduto: movimento.descricaoProduto ?? '',\n        nrLancamento: maxLanc + 1,\n        descricao: movimento.descricao ?? '',\n        valor: movimento.valor ?? 0,\n        datMovimento: new Date().toISOString(),\n        codUsuario: movimento.codUsuario ?? 'TESTE'\n      };\n      // simula persistência\n      this.movimentosSeed = [novo, ...this.movimentosSeed];\n      // retorna o objeto criado simulando delay do backend\n      return of({\n        ...novo\n      }).pipe(delay(300));\n    }\n    static {\n      this.ɵfac = function MovimentoService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || MovimentoService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: MovimentoService,\n        factory: MovimentoService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MovimentoService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}